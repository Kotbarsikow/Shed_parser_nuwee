from flask import Flask, request, jsonify
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
import json
import os
from datetime import datetime

app = Flask(__name__)

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
CHROMEDRIVER_PATH = "/—à–ª—è—Ö/–¥–æ/chromedriver"  # –û–Ω–æ–≤—ñ—Ç—å —à–ª—è—Ö –¥–æ chromedriver
SCOPES = ['https://www.googleapis.com/auth/calendar']
CALENDAR_ID = 'primary'
SCHEDULE_FILE = 'schedule.json'
COOKIES_FILE = 'cookies.json'  # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è cookies –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ =====
def setup_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    service = Service(executable_path=CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó =====
def load_cookies(driver):
    if os.path.exists(COOKIES_FILE):
        with open(COOKIES_FILE, 'r') as f:
            cookies = json.load(f)
        for cookie in cookies:
            driver.add_cookie(cookie)
        return True
    return False

def save_cookies(driver):
    cookies = driver.get_cookies()
    with open(COOKIES_FILE, 'w') as f:
        json.dump(cookies, f)

# ===== –ü–∞—Ä—Å–∏–Ω–≥ —Ä–æ–∑–∫–ª–∞–¥—É –∑ desk.nuwm.edu.ua =====
def fetch_schedule(driver, start_date, end_date):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–æ–∑–∫–ª–∞–¥—É
    driver.get("https://desk.nuwm.edu.ua/cgi-bin/timetable.cgi?n=700")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ
    if "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É –ø–æ—à—Ç—É" in driver.page_source:
        return None  # –°–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

    # –í–≤–æ–¥–∏–º–æ –¥–∞—Ç–∏
    WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.ID, "start_date")))
    driver.find_element(By.ID, "start_date").clear()
    driver.find_element(By.ID, "start_date").send_keys(start_date)
    driver.find_element(By.ID, "end_date").clear()
    driver.find_element(By.ID, "end_date").send_keys(end_date)
    driver.find_element(By.ID, "submit_dates").click()

    # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—è —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
    WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CLASS_NAME, "schedule-table")))

    # –ü–∞—Ä—Å–∏–º–æ —Ä–æ–∑–∫–ª–∞–¥
    schedule = []
    rows = driver.find_elements(By.XPATH, "//table[@class='schedule-table']/tbody/tr")
    for row in rows:
        cells = row.find_elements(By.TAG_NAME, "td")
        if len(cells) >= 5:
            schedule.append({
                "date": cells[0].text.strip(),
                "day": cells[1].text.strip(),
                "time": cells[2].text.strip(),
                "subject": cells[3].text.strip(),
                "teacher": cells[4].text.strip(),
                "remote": "–¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ" in cells[4].text.lower()
            })

    return schedule

# ===== –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ü—ñ–Ω–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥) =====
def fetch_grades(driver):
    # TODO: –î–æ–¥–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ü—ñ–Ω–æ–∫ —ñ–∑ desk.nuwm.edu.ua
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ—Ü—ñ–Ω–æ–∫ —ñ —Å–ø–∞—Ä—Å–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
    return [
        {"subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "grade": "5"},
        {"subject": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "grade": "4"},
    ]

# ===== –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥) =====
def fetch_student_group(driver):
    # TODO: –î–æ–¥–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —ñ–∑ desk.nuwm.edu.ua
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–Ω–∞–π—Ç–∏ –≥—Ä—É–ø—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—é —Å—Ç—É–¥–µ–Ω—Ç–∞
    return "–ö–Ü-21"

# ===== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω —É —Ä–æ–∑–∫–ª–∞–¥—ñ =====
def are_schedules_different(old, new):
    return old != new

# ===== –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Google Calendar =====
def sync_to_calendar(schedule, access_token):
    creds = Credentials(token=access_token, scopes=SCOPES)
    service = build('calendar', 'v3', credentials=creds)

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–¥—ñ—ó (–æ–ø—Ü—ñ–π–Ω–æ)
    events = service.events().list(calendarId=CALENDAR_ID).execute()
    for event in events.get('items', []):
        service.events().delete(calendarId=CALENDAR_ID, eventId=event['id']).execute()

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–¥—ñ—ó
    for item in schedule:
        date = item['date']
        time_range = item['time'].split('-')
        start_time = f"{date}T{time_range[0]}:00"
        end_time = f"{date}T{time_range[1]}:00"

        event = {
            'summary': f"{item['subject']} - {item['teacher']}",
            'description': "–î–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ" if item['remote'] else "–û—á–Ω–æ",
            'start': {
                'dateTime': start_time,
                'timeZone': 'Europe/Kiev',
            },
            'end': {
                'dateTime': end_time,
                'timeZone': 'Europe/Kiev',
            },
        }
        service.events().insert(calendarId=CALENDAR_ID, body=event).execute()

# ===== API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É =====
@app.route('/schedule', methods=['POST'])
def get_schedule():
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —ñ–∑ –∑–∞–ø–∏—Ç—É
        data = request.get_json()
        access_token = data.get('access_token')
        start_date = data.get('start_date')  # –§–æ—Ä–º–∞—Ç: "2025-03-01T00:00:00Z"
        end_date = data.get('end_date')      # –§–æ—Ä–º–∞—Ç: "2025-05-31T23:59:59Z"

        if not access_token or not start_date or not end_date:
            return jsonify({"error": "Missing required fields"}), 400

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –æ—á—ñ–∫—É—î —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "20.03.2025")
        start_dt = datetime.strptime(start_date, "%Y-%m-%dT%H:%M:%SZ")
        end_dt = datetime.strptime(end_date, "%Y-%m-%dT%H:%M:%SZ")
        start_date_formatted = start_dt.strftime("%d.%m.%Y")
        end_date_formatted = end_dt.strftime("%d.%m.%Y")

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥—Ä–∞–π–≤–µ—Ä
        driver = setup_driver()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        driver.get("https://desk.nuwm.edu.ua/cgi-bin/classman.cgi?n=999")
        if not load_cookies(driver):
            # –Ø–∫—â–æ cookies –Ω–µ–º–∞—î, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –≤—Ä—É—á–Ω—É (–æ–¥–∏–Ω —Ä–∞–∑)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, "//a[text()='–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É –ø–æ—à—Ç—É']"))
            ).click()
            print("üîê –£–≤—ñ–π–¥–∏ –≤—Ä—É—á–Ω—É –≤ Google, –∞ –ø–æ—Ç—ñ–º –∑–∞–∫—Ä–∏–π –≤–∫–ª–∞–¥–∫—É –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é")
            input("–ù–∞—Ç–∏—Å–Ω–∏ Enter, –∫–æ–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
            save_cookies(driver)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
        schedule = fetch_schedule(driver, start_date_formatted, end_date_formatted)
        if schedule is None:
            driver.quit()
            return jsonify({"error": "Authorization failed"}), 401

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        grades = fetch_grades(driver)

        # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        student_group = fetch_student_group(driver)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ —É —Ñ–∞–π–ª —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏
        if os.path.exists(SCHEDULE_FILE):
            with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
                old_schedule = json.load(f)
        else:
            old_schedule = []

        if are_schedules_different(old_schedule, schedule):
            print("üîÑ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é...")
            with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
                json.dump(schedule, f, ensure_ascii=False, indent=2)
            sync_to_calendar(schedule, access_token)
        else:
            print("‚úÖ –†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è.")

        driver.quit()

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
        return jsonify({
            "schedule": schedule,
            "grades": grades,
            "student_group": student_group
        }), 200

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        driver.quit()
        return jsonify({"error": str(e)}), 500

# ===== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ =====
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)