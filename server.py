from flask import Flask, request, jsonify
from flask_cors import CORS
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import re
import traceback
import logging
import datetime
import atexit
import json
from time import sleep
from threading import Thread

app = Flask(__name__)
CORS(app)

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

driver = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞


def init_browser():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless —Ä–µ–∂–∏–º—ñ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
    """
    global driver
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--headless')  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ headless-—Ä–µ–∂–∏–º
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-notifications')

    driver = webdriver.Chrome(options=options)
    driver.get("https://desk.nuwm.edu.ua/cgi-bin/timetable.cgi")
    logging.info("üöÄ –ë—Ä–∞—É–∑–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ —Å–∞–π—Ç")


def update_schedule_page(group, date, retries=3, delay=5):
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –≥—Ä—É–ø–∏ —ñ –¥–∞—Ç–∏ –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏.
    """
    global driver
    for attempt in range(retries):
        try:
            logging.info(f"üîÑ –°–ø—Ä–æ–±–∞ {attempt + 1} –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
            WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, "group")))
            group_input = driver.find_element(By.NAME, "group")
            group_input.clear()
            group_input.send_keys(group)

            sdate_input = driver.find_element(By.NAME, "sdate")
            sdate_input.clear()
            sdate_input.send_keys(date)

            edate_input = driver.find_element(By.NAME, "edate")
            edate_input.clear()
            edate_input.send_keys(date)

            driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()

            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CLASS_NAME, "col-md-6"))
            )

            logging.info("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            return driver.page_source

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
            if attempt < retries - 1:
                logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                sleep(delay)
            else:
                logging.error("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ–≤–¥–∞–ª—ñ")
                return None


def parse_schedule_html(html):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É.
    """
    try:
        soup = BeautifulSoup(html, 'html.parser')
        schedule_data = []

        # –û—Ç—Ä–∏–º—É—î–º–æ –±–ª–æ–∫–∏ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º
        day_blocks = soup.find_all('div', class_='col-md-6')
        for day_block in day_blocks:
            date_element = day_block.find('h4')
            if not date_element:
                continue
            date_text = date_element.text.split()[0]

            table = day_block.find('table', class_='table')
            if not table:
                continue

            rows = table.find('tbody').find_all('tr')
            for row in rows:
                cols = row.find_all('td')
                if len(cols) < 3:
                    continue

                lesson_number = cols[0].text.strip()
                time = cols[1].text.replace('\n', '-').strip()
                details = cols[2].decode_contents().strip()

                # –û—á–∏—â—É—î–º–æ —Ç–µ–≥–∏ HTML —ñ <br>
                details_cleaned = BeautifulSoup(details, 'html.parser').get_text(separator='\n').strip()

                # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
                teacher = ''
                room = ''
                group = '–í—Å—è –≥—Ä—É–ø–∞'  # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                subject = ''
                lesson_type = ''

                details_parts = [part.strip() for part in details_cleaned.split('\n') if part.strip()]
                if not details_parts:
                    continue

                # –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—è
                subject_with_type = details_parts.pop(-1)
                subject_match = re.match(r'(.+?)\s*\((.+?)\)', subject_with_type)
                if subject_match:
                    subject = subject_match.group(1).strip()
                    lesson_type = subject_match.group(2).strip()
                else:
                    subject = subject_with_type.strip()

                # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏
                for part in details_parts:
                    if re.match(r'^\d{2,4}$', part):  # –ê—É–¥–∏—Ç–æ—Ä—ñ—è
                        room = part
                    elif re.search(r'(–≤–∏–∫–ª–∞–¥–∞—á|–¥–æ—Ü–µ–Ω—Ç|–ø—Ä–æ—Ñ–µ—Å–æ—Ä|–∞—Å–∏—Å—Ç–µ–Ω—Ç|—Å—Ç\. –≤–∏–∫–ª–∞–¥–∞—á|–∑–∞–≤\. –∫–∞—Ñ–µ–¥—Ä–æ—é)', part, re.IGNORECASE):  # –í–∏–∫–ª–∞–¥–∞—á
                        teacher = part
                    elif re.match(r'^(–ü–æ—Ç—ñ–∫|–ì—Ä—É–ø–∞|–ó–±—ñ—Ä–Ω–∞ –≥—Ä—É–ø–∞)', part):  # –ì—Ä—É–ø–∞
                        group = part

                schedule_data.append({
                    "date": date_text,
                    "lesson_number": lesson_number,
                    "time": time,
                    "room": room,
                    "teacher": teacher,
                    "group": group,
                    "subject": subject,
                    "lesson_type": lesson_type
                })

        logging.info(f"üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(schedule_data)} –ø–∞—Ä(–∞)")
        return schedule_data

    except Exception as e:
        logging.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É HTML:")
        logging.error(traceback.format_exc())
        return []


@atexit.register
def shutdown():
    """
    –ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏.
    """
    global driver
    if driver:
        driver.quit()
        logging.info("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")


@app.route('/', methods=['POST'])
def get_schedule():
    """
    –û–±—Ä–æ–±–∫–∞ HTTP POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É.
    """
    group = request.form.get("group")
    sdate = request.form.get("sdate")
    edate = request.form.get("edate")

    logging.info(f"üîç –ó–∞–ø–∏—Ç: –≥—Ä—É–ø–∞={group}, –∑={sdate}, –ø–æ={edate}")

    if not group or not sdate or not edate:
        return jsonify({"error": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –≥—Ä—É–ø—É –∞–±–æ –¥–∞—Ç—É"}), 400

    try:
        datetime.datetime.strptime(sdate, "%d.%m.%Y")
        datetime.datetime.strptime(edate, "%d.%m.%Y")
    except ValueError:
        return jsonify({"error": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏"}), 400

    html = update_schedule_page(group, sdate)
    if not html:
        return jsonify({"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"}), 500

    schedule = parse_schedule_html(html)
    if not schedule:
        logging.warning("‚ö†Ô∏è –†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø—É—Å—Ç–∏–π.")
        return jsonify({"message": "–†–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}), 200

    logging.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É: {json.dumps(schedule, indent=4, ensure_ascii=False)}")
    return jsonify(schedule), 200


if __name__ == '__main__':
    init_browser()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–æ —Å—Ç–∞—Ä—Ç—É Flask
    app.run(host='0.0.0.0', port=5050, debug=True)
